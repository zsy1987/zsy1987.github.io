import*as e from"three";import{Ray as t,Plane as n,MathUtils as r,EventDispatcher as s,Vector3 as o,MOUSE as i,TOUCH as a,Quaternion as c,Spherical as l,Vector2 as h}from"three";!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const d=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(n){return e[0]=n,t[0]}}(),p=function(e,t){return new Promise(((n,r)=>{fetch(e).then((async e=>{const s=e.body.getReader();let o=0,i=e.headers.get("Content-Length"),a=i?parseInt(i):void 0;const c=[];for(;;)try{const{value:e,done:r}=await s.read();if(r){t&&t(100,"100%",e);const r=new Blob(c).arrayBuffer();n(r);break}let i,l;o+=e.length,void 0!==a&&(i=o/a*100,l=`${i.toFixed(2)}%`),c.push(e),t&&t(i,l,e)}catch(e){r(e);break}}))}))},u=function(e,t,n){return Math.max(Math.min(e,n),t)},m=function(){return performance.now()/1e3},f=new e.Vector3,y=new e.Vector3,g=new e.Vector4,C=new e.Vector4,A=new e.Quaternion,v=new e.Quaternion;let w,x;class b{static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CompressionLevels={0:{BytesPerCenter:12,BytesPerScale:12,BytesPerColor:4,BytesPerRotation:16,ScaleRange:1},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerColor:4,BytesPerRotation:8,ScaleRange:32767}};static CovarianceSizeFloats=6;static CovarianceSizeBytes=24;static HeaderSizeBytes=1024;constructor(e){this.headerBufferData=new ArrayBuffer(b.HeaderSizeBytes),this.headerArrayUint8=new Uint8Array(this.headerBufferData),this.headerArrayUint32=new Uint32Array(this.headerBufferData),this.headerArrayFloat32=new Float32Array(this.headerBufferData),this.headerArrayUint8.set(new Uint8Array(e,0,b.HeaderSizeBytes)),this.versionMajor=this.headerArrayUint8[0],this.versionMinor=this.headerArrayUint8[1],this.headerExtraK=this.headerArrayUint8[2],this.compressionLevel=this.headerArrayUint8[3],this.splatCount=this.headerArrayUint32[1],this.bucketSize=this.headerArrayUint32[2],this.bucketCount=this.headerArrayUint32[3],this.bucketBlockSize=this.headerArrayFloat32[4],this.halfBucketBlockSize=this.bucketBlockSize/2,this.bytesPerBucket=this.headerArrayUint32[5],this.compressionScaleRange=this.headerArrayUint32[6]||b.CompressionLevels[this.compressionLevel].ScaleRange,this.compressionScaleFactor=this.halfBucketBlockSize/this.compressionScaleRange;const t=e.byteLength-b.HeaderSizeBytes;this.splatBufferData=new ArrayBuffer(t),new Uint8Array(this.splatBufferData).set(new Uint8Array(e,b.HeaderSizeBytes,t)),this.bytesPerCenter=b.CompressionLevels[this.compressionLevel].BytesPerCenter,this.bytesPerScale=b.CompressionLevels[this.compressionLevel].BytesPerScale,this.bytesPerColor=b.CompressionLevels[this.compressionLevel].BytesPerColor,this.bytesPerRotation=b.CompressionLevels[this.compressionLevel].BytesPerRotation,this.bytesPerSplat=this.bytesPerCenter+this.bytesPerScale+this.bytesPerColor+this.bytesPerRotation,w=this.fbf.bind(this),x=this.tbf.bind(this),this.linkBufferArrays()}linkBufferArrays(){let e=0===this.compressionLevel?Float32Array:Uint16Array;this.centerArray=new e(this.splatBufferData,0,this.splatCount*b.CenterComponentCount),this.scaleArray=new e(this.splatBufferData,this.bytesPerCenter*this.splatCount,this.splatCount*b.ScaleComponentCount),this.colorArray=new Uint8Array(this.splatBufferData,(this.bytesPerCenter+this.bytesPerScale)*this.splatCount,this.splatCount*b.ColorComponentCount),this.rotationArray=new e(this.splatBufferData,(this.bytesPerCenter+this.bytesPerScale+this.bytesPerColor)*this.splatCount,this.splatCount*b.RotationComponentCount),this.bucketsBase=this.splatCount*this.bytesPerSplat}fbf(t){return 0===this.compressionLevel?t:e.DataUtils.fromHalfFloat(t)}tbf(t){return 0===this.compressionLevel?t:e.DataUtils.toHalfFloat(t)}getHeaderBufferData(){return this.headerBufferData}getSplatBufferData(){return this.splatBufferData}getCenter(t,n=new e.Vector3,r){let s=[0,0,0];const o=t*b.CenterComponentCount;if(this.compressionLevel>0){const e=this.compressionScaleFactor,r=this.compressionScaleRange,i=Math.floor(t/this.bucketSize);s=new Float32Array(this.splatBufferData,this.bucketsBase+i*this.bytesPerBucket,3),n.x=(this.centerArray[o]-r)*e+s[0],n.y=(this.centerArray[o+1]-r)*e+s[1],n.z=(this.centerArray[o+2]-r)*e+s[2]}else n.x=this.centerArray[o],n.y=this.centerArray[o+1],n.z=this.centerArray[o+2];return r&&n.applyMatrix4(r),n}setCenter(e,t){let n=[0,0,0];const r=e*b.CenterComponentCount;if(this.compressionLevel>0){const s=1/this.compressionScaleFactor,o=this.compressionScaleRange,i=2*o+1,a=Math.floor(e/this.bucketSize);n=new Float32Array(this.splatBufferData,this.bucketsBase+a*this.bytesPerBucket,3),this.centerArray[r]=u(Math.round((t.x-n[0])*s)+o,0,i),this.centerArray[r+1]=u(Math.round((t.y-n[1])*s)+o,0,i),this.centerArray[r+2]=u(Math.round((t.z-n[2])*s)+o,0,i)}else this.centerArray[r]=t.x,this.centerArray[r+1]=t.y,this.centerArray[r+2]=t.z}getScaleAndRotation=function(){const t=new e.Matrix4,n=new e.Matrix4,r=new e.Matrix4,s=new e.Vector3;return function(o,i=new e.Vector3,a=new e.Quaternion,c){const l=o*b.ScaleComponentCount;i.set(w(this.scaleArray[l]),w(this.scaleArray[l+1]),w(this.scaleArray[l+2]));const h=o*b.RotationComponentCount;a.set(w(this.rotationArray[h+1]),w(this.rotationArray[h+2]),w(this.rotationArray[h+3]),w(this.rotationArray[h])),c&&(t.makeScale(i.x,i.y,i.z),n.makeRotationFromQuaternion(a),r.copy(t).multiply(n).multiply(c),r.decompose(s,a,i))}}();getColor(t,n=new e.Vector4,r){const s=t*b.ColorComponentCount;return n.set(this.colorArray[s],this.colorArray[s+1],this.colorArray[s+2],this.colorArray[s+3]),n}setColor(e,t){const n=e*b.ColorComponentCount;this.colorArray[n]=t.x,this.colorArray[n+1]=t.y,this.colorArray[n+2]=t.z,this.colorArray[n+3]=t.w}getSplatCount(){return this.splatCount}fillCovarianceArray(t,n,r){const s=this.splatCount,o=new e.Vector3,i=new e.Quaternion,a=new e.Matrix3,c=new e.Matrix3,l=new e.Matrix3,h=new e.Matrix3,d=new e.Matrix3,p=new e.Matrix3,u=new e.Matrix4;for(let e=0;e<s;e++){const s=e*b.ScaleComponentCount;o.set(w(this.scaleArray[s]),w(this.scaleArray[s+1]),w(this.scaleArray[s+2])),u.makeScale(o.x,o.y,o.z),c.setFromMatrix4(u);const m=e*b.RotationComponentCount;i.set(w(this.rotationArray[m+1]),w(this.rotationArray[m+2]),w(this.rotationArray[m+3]),w(this.rotationArray[m])),u.makeRotationFromQuaternion(i),a.setFromMatrix4(u),l.copy(a).multiply(c),h.copy(l).transpose().premultiply(l);const f=b.CovarianceSizeFloats*(e+n);r&&(d.setFromMatrix4(r),p.copy(d).transpose(),h.multiply(p),h.premultiply(d)),t[f]=h.elements[0],t[f+1]=h.elements[3],t[f+2]=h.elements[6],t[f+3]=h.elements[4],t[f+4]=h.elements[7],t[f+5]=h.elements[8]}}fillCenterArray(t,n,r){const s=this.splatCount;let o=[0,0,0];const i=new e.Vector3;for(let e=0;e<s;e++){const s=e*b.CenterComponentCount,a=(e+n)*b.CenterComponentCount;if(this.compressionLevel>0){const t=Math.floor(e/this.bucketSize);o=new Float32Array(this.splatBufferData,this.bucketsBase+t*this.bytesPerBucket,3);const n=this.compressionScaleFactor,r=this.compressionScaleRange;i.x=(this.centerArray[s]-r)*n+o[0],i.y=(this.centerArray[s+1]-r)*n+o[1],i.z=(this.centerArray[s+2]-r)*n+o[2]}else i.x=this.centerArray[s],i.y=this.centerArray[s+1],i.z=this.centerArray[s+2];r&&i.applyMatrix4(r),t[a]=i.x,t[a+1]=i.y,t[a+2]=i.z}}fillColorArray(e,t,n){const r=this.splatCount;for(let n=0;n<r;n++){const r=n*b.ColorComponentCount,s=(n+t)*b.ColorComponentCount;e[s]=this.colorArray[r],e[s+1]=this.colorArray[r+1],e[s+2]=this.colorArray[r+2],e[s+3]=this.colorArray[r+3]}}swapVertices(t,n){const r=(t,n=new e.Vector3)=>{const r=t*b.ScaleComponentCount;return n.set(w(this.scaleArray[r]),w(this.scaleArray[r+1]),w(this.scaleArray[r+2])),n},s=(e,t)=>{const n=e*b.ScaleComponentCount;this.scaleArray[n]=x(t.x),this.scaleArray[n+1]=x(t.y),this.scaleArray[n+2]=x(t.z)},o=(t,n=new e.Quaternion)=>{const r=t*b.RotationComponentCount;return n.set(w(this.rotationArray[r+1]),w(this.rotationArray[r+2]),w(this.rotationArray[r+3]),w(this.rotationArray[r])),n},i=(e,t)=>{const n=e*b.RotationComponentCount;this.rotationArray[n]=x(t.w),this.rotationArray[n+1]=x(t.x),this.rotationArray[n+2]=x(t.y),this.rotationArray[n+3]=x(t.z)};getCenter(t,f),getCenter(n,y),setCenter(n,f),setCenter(t,y),r(t,f),r(n,y),s(n,f),s(t,y),o(t,A),o(n,v),i(n,A),i(t,v),getColor(t,g),getColor(n,C),setColor(n,g),setColor(t,C)}}class M{constructor(e=0,t=1,n=256,r=5){this.compressionLevel=e,this.minimumAlpha=t,this.bucketSize=n,this.blockSize=r}static createEmptyUncompressedSplatArray(){return{splatCount:0,scale_0:[],scale_1:[],scale_2:[],rot_0:[],rot_1:[],rot_2:[],rot_3:[],x:[],y:[],z:[],f_dc_0:[],f_dc_1:[],f_dc_2:[],opacity:[],addSplat:function(e,t,n,r,s,o,i,a,c,l,h,d,p,u){this.x.push(e),this.y.push(t),this.z.push(n),this.scale_0.push(r),this.scale_1.push(s),this.scale_2.push(o),this.rot_0.push(i),this.rot_1.push(a),this.rot_2.push(c),this.rot_3.push(l),this.f_dc_0.push(h),this.f_dc_1.push(d),this.f_dc_2.push(p),this.opacity.push(u),this.splatCount++}}}uncompressedSplatArrayToSplatBuffer(t){const n=M.createEmptyUncompressedSplatArray();n.addSplat(0,0,0,0,0,0,1,0,0,0,0,0,0,0);for(let e=0;e<t.splatCount;e++){let r;r=t.opacity[e]?t.opacity[e]:255,r>=this.minimumAlpha&&n.addSplat(t.x[e],t.y[e],t.z[e],t.scale_0[e],t.scale_1[e],t.scale_2[e],t.rot_0[e],t.rot_1[e],t.rot_2[e],t.rot_3[e],t.f_dc_0[e],t.f_dc_1[e],t.f_dc_2[e],t.opacity[e])}const r=this.computeBucketsForUncompressedSplatArray(n),s=r.length*this.bucketSize,o=b.HeaderSizeBytes,i=new Uint8Array(new ArrayBuffer(o));i[3]=this.compressionLevel,new Uint32Array(i.buffer,4,1)[0]=s;let a=b.CompressionLevels[this.compressionLevel].BytesPerCenter,c=b.CompressionLevels[this.compressionLevel].BytesPerScale,l=b.CompressionLevels[this.compressionLevel].BytesPerColor,h=b.CompressionLevels[this.compressionLevel].BytesPerRotation;const d=new ArrayBuffer(a*s),p=new ArrayBuffer(c*s),m=new ArrayBuffer(l*s),f=new ArrayBuffer(h*s),y=this.blockSize/2,g=b.CompressionLevels[this.compressionLevel].ScaleRange,C=g/y,A=2*g+1,v=new e.Vector3,w=new e.Vector3;let x=0;for(let t=0;t<r.length;t++){const s=r[t];v.fromArray(s.center);for(let t=0;t<s.splats.length;t++){let r=s.splats[t],o=!1;if(0===r&&(o=!0),0===this.compressionLevel){const t=new Float32Array(d,x*a,3),s=new Float32Array(p,x*c,3),o=new Float32Array(f,x*h,4);if(void 0!==n.scale_0[r]){const t=new e.Quaternion(n.rot_1[r],n.rot_2[r],n.rot_3[r],n.rot_0[r]);t.normalize(),o.set([t.w,t.x,t.y,t.z]),s.set([n.scale_0[r],n.scale_1[r],n.scale_2[r]])}else s.set([.01,.01,.01]),o.set([1,0,0,0]);t.set([n.x[r],n.y[r],n.z[r]])}else{const t=new Uint16Array(d,x*a,3),s=new Uint16Array(p,x*c,3),o=new Uint16Array(f,x*h,4),i=e.DataUtils.toHalfFloat.bind(e.DataUtils);if(void 0!==n.scale_0[r]){const t=new e.Quaternion(n.rot_1[r],n.rot_2[r],n.rot_3[r],n.rot_0[r]);t.normalize(),o.set([i(t.w),i(t.x),i(t.y),i(t.z)]),s.set([i(n.scale_0[r]),i(n.scale_1[r]),i(n.scale_2[r])])}else s.set([i(.01),i(.01),i(.01)]),o.set([i(1),0,0,0]);w.set(n.x[r],n.y[r],n.z[r]).sub(v),w.x=Math.round(w.x*C)+g,w.x=u(w.x,0,A),w.y=Math.round(w.y*C)+g,w.y=u(w.y,0,A),w.z=Math.round(w.z*C)+g,w.z=u(w.z,0,A),t.set([w.x,w.y,w.z])}const i=new Uint8ClampedArray(m,x*l,4);o?(i[0]=255,i[1]=0,i[2]=0,i[3]=0):(void 0!==n.f_dc_0[r]?i.set([n.f_dc_0[r],n.f_dc_1[r],n.f_dc_2[r]]):i.set([255,0,0]),void 0!==n.opacity[r]?i[3]=n.opacity[r]:i[3]=255),x++}}const S=12*r.length,P=d.byteLength+p.byteLength+m.byteLength+f.byteLength,T=new Uint32Array(i.buffer),D=new Float32Array(i.buffer);let F=o+P;this.compressionLevel>0&&(F+=S,T[2]=this.bucketSize,T[3]=r.length,D[4]=this.blockSize,T[5]=12,T[6]=b.CompressionLevels[this.compressionLevel].ScaleRange);const B=new ArrayBuffer(F);if(new Uint8Array(B,0,o).set(i),new Uint8Array(B,o,d.byteLength).set(new Uint8Array(d)),new Uint8Array(B,o+d.byteLength,p.byteLength).set(new Uint8Array(p)),new Uint8Array(B,o+d.byteLength+p.byteLength,m.byteLength).set(new Uint8Array(m)),new Uint8Array(B,o+d.byteLength+p.byteLength+m.byteLength,f.byteLength).set(new Uint8Array(f)),this.compressionLevel>0){const e=new Float32Array(B,o+P,3*r.length);for(let t=0;t<r.length;t++){const n=r[t],s=3*t;e[s]=n.center[0],e[s+1]=n.center[1],e[s+2]=n.center[2]}}return new b(B)}computeBucketsForUncompressedSplatArray(t){let n=t.splatCount;const r=this.blockSize,s=r/2,o=new e.Vector3,i=new e.Vector3;for(let e=1;e<n;e++){const n=[t.x[e],t.y[e],t.z[e]];(0===e||n[0]<o.x)&&(o.x=n[0]),(0===e||n[0]>i.x)&&(i.x=n[0]),(0===e||n[1]<o.y)&&(o.y=n[1]),(0===e||n[1]>i.y)&&(i.y=n[1]),(0===e||n[2]<o.z)&&(o.z=n[2]),(0===e||n[2]>i.z)&&(i.z=n[2])}const a=(new e.Vector3).copy(i).sub(o),c=Math.ceil(a.y/r),l=Math.ceil(a.z/r),h=new e.Vector3,d=[],p={};for(let e=1;e<n;e++){const n=[t.x[e],t.y[e],t.z[e]],i=Math.ceil((n[0]-o.x)/r),a=Math.ceil((n[1]-o.y)/r),u=Math.ceil((n[2]-o.z)/r);h.x=(i-1)*r+o.x+s,h.y=(a-1)*r+o.y+s,h.z=(u-1)*r+o.z+s;const m=i*(c*l)+a*l+u;let f=p[m];f||(p[m]=f={splats:[],center:h.toArray()}),f.splats.push(e),f.splats.length>=this.bucketSize&&(d.push(f),p[m]=null)}for(let e in p)if(p.hasOwnProperty(e)){const t=p[e];if(t){for(;t.splats.length<this.bucketSize;)t.splats.push(0);d.push(t)}}return d}}class S{constructor(e){this.plyBuffer=e}decodeHeader(e){const t=new TextDecoder;let n=0,r="";console.log(".PLY size: "+e.byteLength+" bytes");const s=100;for(;;){if(n+s>=e.byteLength)throw new Error("End of file reached while searching for end of header");const o=new Uint8Array(e,n,s);r+=t.decode(o),n+=s;const i=new Uint8Array(e,Math.max(0,n-200),200);if(t.decode(i).includes("end_header"))break}const o=r.split("\n");let i=0,a={};for(let e=0;e<o.length;e++){const t=o[e].trim();if(t.startsWith("element vertex")){const e=t.match(/\d+/);e&&(i=parseInt(e[0]))}else if(t.startsWith("property")){const e=t.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const t=e[2];a[e[3]]=t}}else if("end_header"===t)break}const c=r.indexOf("end_header")+10+1;return{splatCount:i,propertyTypes:a,vertexData:new DataView(e,c),headerOffset:n}}readRawVertexFast(e,t,n,r,s,o){let i=o||{};for(let o of r){const r=s[o];"float"===r?i[o]=e.getFloat32(t+n[o],!0):"uchar"===r&&(i[o]=e.getUint8(t+n[o])/255)}}parseToSplatBuffer(e=0,t=1){const n=performance.now();console.log("Parsing PLY to SPLAT...");const{splatCount:r,propertyTypes:s,vertexData:o}=this.decodeHeader(this.plyBuffer);let i=0;for(const e in s)e.startsWith("f_rest_")&&(i+=1);const a=i/3;console.log("Detected degree",0,"with ",a,"coefficients per color");const c=[];for(let e=0;e<3;++e)c.push(`f_dc_${e}`);for(let e=0;e<a;++e)for(let t=0;t<3;++t)c.push(`f_rest_${t*a+e}`);let l=0,h={};const d={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1};for(let e in s)if(s.hasOwnProperty(e)){const t=s[e];h[e]=l,l+=d[t]}let p={};const u=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity"],m=M.createEmptyUncompressedSplatArray();for(let e=0;e<r;e++){if(this.readRawVertexFast(o,e*l,h,u,s,p),void 0!==p.scale_0?(m.scale_0[e]=Math.exp(p.scale_0),m.scale_1[e]=Math.exp(p.scale_1),m.scale_2[e]=Math.exp(p.scale_2)):(m.scale_0[e]=.01,m.scale_1[e]=.01,m.scale_2[e]=.01),void 0!==p.f_dc_0){const t=.28209479177387814;m.f_dc_0[e]=255*(.5+t*p.f_dc_0),m.f_dc_1[e]=255*(.5+t*p.f_dc_1),m.f_dc_2[e]=255*(.5+t*p.f_dc_2)}else m.f_dc_0[e]=0,m.f_dc_1[e]=0,m.f_dc_2[e]=0;void 0!==p.opacity&&(m.opacity[e]=1/(1+Math.exp(-p.opacity))*255),m.rot_0[e]=p.rot_0,m.rot_1[e]=p.rot_1,m.rot_2[e]=p.rot_2,m.rot_3[e]=p.rot_3,m.x[e]=p.x,m.y[e]=p.y,m.z[e]=p.z,m.splatCount++}const f=new M(e,t).uncompressedSplatArrayToSplatBuffer(m);console.log("Total valid splats: ",f.getSplatCount(),"out of",r);const y=performance.now();return console.log("Parsing PLY to SPLAT complete!"),console.log("Total time: ",(y-n).toFixed(2)+" ms"),f}}class P{constructor(){this.splatBuffer=null}fetchFile(e,t){return new Promise(((n,r)=>{p(e,t).then((e=>{n(e)})).catch((e=>{r(e)}))}))}loadFromURL(e,t,n=0,r=1){return new Promise(((s,o)=>{this.fetchFile(e,t).then((e=>{const t=new S(e).parseToSplatBuffer(n,r);this.splatBuffer=t,s(t)})).catch((e=>{o(e)}))}))}}class T{constructor(e=null){this.splatBuffer=e,this.downLoadLink=null}static isFileSplatFormat(e){return T.isCustomSplatFormat(e)||T.isStandardSplatFormat(e)}static isCustomSplatFormat(e){return e.endsWith(".ksplat")}static isStandardSplatFormat(e){return e.endsWith(".splat")}loadFromURL(e,t){return new Promise(((n,r)=>{p(e,t).then((t=>{let r;if(T.isCustomSplatFormat(e))r=new b(t);else{const e=new M(0,1),n=T.parseStandardSplatToUncompressedSplatArray(t);r=e.uncompressedSplatArrayToSplatBuffer(n)}n(r)})).catch((e=>{r(e)}))}))}static parseStandardSplatToUncompressedSplatArray(t){const n=t.byteLength/32,r=M.createEmptyUncompressedSplatArray();for(let s=0;s<n;s++){const n=12,o=12,i=4,a=32*s,c=new Float32Array(t,a,3),l=new Float32Array(t,a+n,3),h=new Uint8Array(t,a+n+o,4),d=new Uint8Array(t,a+n+o+i,4),p=new e.Quaternion((d[1]-128)/128,(d[2]-128)/128,(d[3]-128)/128,(d[0]-128)/128);p.normalize(),r.addSplat(c[0],c[1],c[2],l[0],l[1],l[2],p.w,p.x,p.y,p.z,h[0],h[1],h[2],h[3])}return r}setFromBuffer(e){this.splatBuffer=e}downloadFile(e){const t=new Uint8Array(this.splatBuffer.getHeaderBufferData()),n=new Uint8Array(this.splatBuffer.getSplatBufferData()),r=new Blob([t.buffer,n.buffer],{type:"application/octet-stream"});this.downLoadLink||(this.downLoadLink=document.createElement("a"),document.body.appendChild(this.downLoadLink)),this.downLoadLink.download=e,this.downLoadLink.href=URL.createObjectURL(r),this.downLoadLink.click()}}const D={type:"change"},F={type:"start"},B={type:"end"},R=new t,E=new n,k=Math.cos(70*r.DEG2RAD);class I extends s{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new o,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:i.ROTATE,MIDDLE:i.DOLLY,RIGHT:i.PAN},this.touches={ONE:a.ROTATE,TWO:a.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",se),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",se),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(D),n.update(),s=r.NONE},this.update=function(){const t=new o,i=(new c).setFromUnitVectors(e.up,new o(0,1,0)),a=i.clone().invert(),l=new o,h=new c,y=new o,g=2*Math.PI;return function(){i.setFromUnitVectors(e.up,new o(0,1,0)),a.copy(i).invert();const c=n.object.position;t.copy(c).sub(n.target),t.applyQuaternion(i),p.setFromVector3(t),n.autoRotate&&s===r.NONE&&L(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(p.theta+=u.theta*n.dampingFactor,p.phi+=u.phi*n.dampingFactor):(p.theta+=u.theta,p.phi+=u.phi);let C=n.minAzimuthAngle,A=n.maxAzimuthAngle;isFinite(C)&&isFinite(A)&&(C<-Math.PI?C+=g:C>Math.PI&&(C-=g),A<-Math.PI?A+=g:A>Math.PI&&(A-=g),p.theta=C<=A?Math.max(C,Math.min(A,p.theta)):p.theta>(C+A)/2?Math.max(C,p.theta):Math.min(A,p.theta)),p.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,p.phi)),p.makeSafe(),!0===n.enableDamping?n.target.addScaledVector(f,n.dampingFactor):n.target.add(f),n.zoomToCursor&&T||n.object.isOrthographicCamera?p.radius=G(p.radius):p.radius=G(p.radius*m),t.setFromSpherical(p),t.applyQuaternion(a),c.copy(n.target).add(t),n.object.lookAt(n.target),!0===n.enableDamping?(u.theta*=1-n.dampingFactor,u.phi*=1-n.dampingFactor,f.multiplyScalar(1-n.dampingFactor)):(u.set(0,0,0),f.set(0,0,0));let v=!1;if(n.zoomToCursor&&T){let r=null;if(n.object.isPerspectiveCamera){const e=t.length();r=G(e*m);const s=e-r;n.object.position.addScaledVector(S,s),n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const e=new o(P.x,P.y,0);e.unproject(n.object),n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),v=!0;const s=new o(P.x,P.y,0);s.unproject(n.object),n.object.position.sub(s).add(e),n.object.updateMatrixWorld(),r=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;null!==r&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(r).add(n.object.position):(R.origin.copy(n.object.position),R.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(R.direction))<k?e.lookAt(n.target):(E.setFromNormalAndCoplanarPoint(n.object.up,n.target),R.intersectPlane(E,n.target))))}else n.object.isOrthographicCamera&&(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),v=!0);return m=1,T=!1,!!(v||l.distanceToSquared(n.object.position)>d||8*(1-h.dot(n.object.quaternion))>d||y.distanceToSquared(n.target)>0)&&(n.dispatchEvent(D),l.copy(n.object.position),h.copy(n.object.quaternion),y.copy(n.target),v=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",oe),n.domElement.removeEventListener("pointerdown",ee),n.domElement.removeEventListener("pointercancel",ne),n.domElement.removeEventListener("wheel",re),n.domElement.removeEventListener("pointermove",te),n.domElement.removeEventListener("pointerup",ne),null!==n._domElementKeyEvents&&(n._domElementKeyEvents.removeEventListener("keydown",se),n._domElementKeyEvents=null)};const n=this,r={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=r.NONE;const d=1e-6,p=new l,u=new l;let m=1;const f=new o,y=new h,g=new h,C=new h,A=new h,v=new h,w=new h,x=new h,b=new h,M=new h,S=new o,P=new h;let T=!1;const I=[],_={};function z(){return Math.pow(.95,n.zoomSpeed)}function L(e){u.theta-=e}function U(e){u.phi-=e}const V=function(){const e=new o;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),f.add(e)}}(),O=function(){const e=new o;return function(t,r){!0===n.screenSpacePanning?e.setFromMatrixColumn(r,1):(e.setFromMatrixColumn(r,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),f.add(e)}}(),N=function(){const e=new o;return function(t,r){const s=n.domElement;if(n.object.isPerspectiveCamera){const o=n.object.position;e.copy(o).sub(n.target);let i=e.length();i*=Math.tan(n.object.fov/2*Math.PI/180),V(2*t*i/s.clientHeight,n.object.matrix),O(2*r*i/s.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(V(t*(n.object.right-n.object.left)/n.object.zoom/s.clientWidth,n.object.matrix),O(r*(n.object.top-n.object.bottom)/n.object.zoom/s.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function j(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function H(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function W(t){if(!n.zoomToCursor)return;T=!0;const r=n.domElement.getBoundingClientRect(),s=t.clientX-r.left,o=t.clientY-r.top,i=r.width,a=r.height;P.x=s/i*2-1,P.y=-o/a*2+1,S.set(P.x,P.y,1).unproject(e).sub(e.position).normalize()}function G(e){return Math.max(n.minDistance,Math.min(n.maxDistance,e))}function Y(e){y.set(e.clientX,e.clientY)}function Q(e){A.set(e.clientX,e.clientY)}function K(){if(1===I.length)y.set(I[0].pageX,I[0].pageY);else{const e=.5*(I[0].pageX+I[1].pageX),t=.5*(I[0].pageY+I[1].pageY);y.set(e,t)}}function X(){if(1===I.length)A.set(I[0].pageX,I[0].pageY);else{const e=.5*(I[0].pageX+I[1].pageX),t=.5*(I[0].pageY+I[1].pageY);A.set(e,t)}}function $(){const e=I[0].pageX-I[1].pageX,t=I[0].pageY-I[1].pageY,n=Math.sqrt(e*e+t*t);x.set(0,n)}function Z(e){if(1==I.length)g.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);g.set(n,r)}C.subVectors(g,y).multiplyScalar(n.rotateSpeed);const t=n.domElement;L(2*Math.PI*C.x/t.clientHeight),U(2*Math.PI*C.y/t.clientHeight),y.copy(g)}function q(e){if(1===I.length)v.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);v.set(n,r)}w.subVectors(v,A).multiplyScalar(n.panSpeed),N(w.x,w.y),A.copy(v)}function J(e){const t=ae(e),r=e.pageX-t.x,s=e.pageY-t.y,o=Math.sqrt(r*r+s*s);b.set(0,o),M.set(0,Math.pow(b.y/x.y,n.zoomSpeed)),j(M.y),x.copy(b)}function ee(e){!1!==n.enabled&&(0===I.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",te),n.domElement.addEventListener("pointerup",ne)),function(e){I.push(e)}(e),"touch"===e.pointerType?function(e){switch(ie(e),I.length){case 1:switch(n.touches.ONE){case a.ROTATE:if(!1===n.enableRotate)return;K(),s=r.TOUCH_ROTATE;break;case a.PAN:if(!1===n.enablePan)return;X(),s=r.TOUCH_PAN;break;default:s=r.NONE}break;case 2:switch(n.touches.TWO){case a.DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&$(),n.enablePan&&X(),s=r.TOUCH_DOLLY_PAN;break;case a.DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&$(),n.enableRotate&&K(),s=r.TOUCH_DOLLY_ROTATE;break;default:s=r.NONE}break;default:s=r.NONE}s!==r.NONE&&n.dispatchEvent(F)}(e):function(e){let t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case i.DOLLY:if(!1===n.enableZoom)return;!function(e){W(e),x.set(e.clientX,e.clientY)}(e),s=r.DOLLY;break;case i.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;Q(e),s=r.PAN}else{if(!1===n.enableRotate)return;Y(e),s=r.ROTATE}break;case i.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;Y(e),s=r.ROTATE}else{if(!1===n.enablePan)return;Q(e),s=r.PAN}break;default:s=r.NONE}s!==r.NONE&&n.dispatchEvent(F)}(e))}function te(e){!1!==n.enabled&&("touch"===e.pointerType?function(e){switch(ie(e),s){case r.TOUCH_ROTATE:if(!1===n.enableRotate)return;Z(e),n.update();break;case r.TOUCH_PAN:if(!1===n.enablePan)return;q(e),n.update();break;case r.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(e){n.enableZoom&&J(e),n.enablePan&&q(e)}(e),n.update();break;case r.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(e){n.enableZoom&&J(e),n.enableRotate&&Z(e)}(e),n.update();break;default:s=r.NONE}}(e):function(e){switch(s){case r.ROTATE:if(!1===n.enableRotate)return;!function(e){g.set(e.clientX,e.clientY),C.subVectors(g,y).multiplyScalar(n.rotateSpeed);const t=n.domElement;L(2*Math.PI*C.x/t.clientHeight),U(2*Math.PI*C.y/t.clientHeight),y.copy(g),n.update()}(e);break;case r.DOLLY:if(!1===n.enableZoom)return;!function(e){b.set(e.clientX,e.clientY),M.subVectors(b,x),M.y>0?j(z()):M.y<0&&H(z()),x.copy(b),n.update()}(e);break;case r.PAN:if(!1===n.enablePan)return;!function(e){v.set(e.clientX,e.clientY),w.subVectors(v,A).multiplyScalar(n.panSpeed),N(w.x,w.y),A.copy(v),n.update()}(e)}}(e))}function ne(e){!function(e){delete _[e.pointerId];for(let t=0;t<I.length;t++)if(I[t].pointerId==e.pointerId)return void I.splice(t,1)}(e),0===I.length&&(n.domElement.releasePointerCapture(e.pointerId),n.domElement.removeEventListener("pointermove",te),n.domElement.removeEventListener("pointerup",ne)),n.dispatchEvent(B),s=r.NONE}function re(e){!1!==n.enabled&&!1!==n.enableZoom&&s===r.NONE&&(e.preventDefault(),n.dispatchEvent(F),function(e){W(e),e.deltaY<0?H(z()):e.deltaY>0&&j(z()),n.update()}(e),n.dispatchEvent(B))}function se(e){!1!==n.enabled&&!1!==n.enablePan&&function(e){let t=!1;switch(e.code){case n.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?U(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):N(0,n.keyPanSpeed),t=!0;break;case n.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?U(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):N(0,-n.keyPanSpeed),t=!0;break;case n.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?L(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):N(n.keyPanSpeed,0),t=!0;break;case n.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?L(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):N(-n.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),n.update())}(e)}function oe(e){!1!==n.enabled&&e.preventDefault()}function ie(e){let t=_[e.pointerId];void 0===t&&(t=new h,_[e.pointerId]=t),t.set(e.pageX,e.pageY)}function ae(e){const t=e.pointerId===I[0].pointerId?I[1]:I[0];return _[t.pointerId]}n.domElement.addEventListener("contextmenu",oe),n.domElement.addEventListener("pointerdown",ee),n.domElement.addEventListener("pointercancel",ne),n.domElement.addEventListener("wheel",re,{passive:!1}),this.update()}}class _{constructor(e,t){this.message=e||"Loading...",this.container=t||document.body,this.spinnerDivContainerOuter=document.createElement("div"),this.spinnerDivContainerOuter.className="outerContainer",this.spinnerDivContainerOuter.style.display="none",this.spinnerDivContainer=document.createElement("div"),this.spinnerDivContainer.className="container",this.spinnerDiv=document.createElement("div"),this.spinnerDiv.className="loader",this.messageDiv=document.createElement("div"),this.messageDiv.className="message",this.messageDiv.innerHTML=this.message,this.spinnerDivContainer.appendChild(this.spinnerDiv),this.spinnerDivContainer.appendChild(this.messageDiv),this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer),this.container.appendChild(this.spinnerDivContainerOuter);const n=document.createElement("style");n.innerHTML="\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width: 180px;\n            }\n\n            .outerContainer {\n                width: 100%;\n                height: 100%;\n            }\n\n            .container {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        ",this.spinnerDivContainerOuter.appendChild(n)}show(){this.spinnerDivContainerOuter.style.display="block"}hide(){this.spinnerDivContainerOuter.style.display="none"}setContainer(e){this.container&&this.container.removeChild(this.spinnerDivContainerOuter),this.container=e,this.container.appendChild(this.spinnerDivContainerOuter),this.spinnerDivContainerOuter.style.zIndex=this.container.style.zIndex+1}setMessage(e){this.messageDiv.innerHTML=e}}class z extends e.Object3D{constructor(t=new e.Vector3(0,0,1),n=new e.Vector3(0,0,0),r=1,s=.1,o=16776960,i=.2*r,a=.2*i){super(),this.type="ArrowHelper";const c=new e.CylinderGeometry(s,s,r,32);c.translate(0,r/2,0);const l=new e.CylinderGeometry(0,a,i,32);l.translate(0,r,0),this.position.copy(n),this.line=new e.Mesh(c,new e.MeshBasicMaterial({color:o,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new e.Mesh(l,new e.MeshBasicMaterial({color:o,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class L{constructor(e){this.scene=e,this.splatRenderTarget=null,this.renderTargetCopyMaterial=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null}updateSplatRenderTargetForRenderDimensions(t,n){this.splatRenderTarget=new e.WebGLRenderTarget(t,n,{format:e.RGBAFormat,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new e.DepthTexture(t,n),this.splatRenderTarget.depthTexture.format=e.DepthFormat,this.splatRenderTarget.depthTexture.type=e.UnsignedIntType}setupRenderTargetCopyObjects(){this.renderTargetCopyMaterial=new e.ShaderMaterial({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:e.CustomBlending,blendSrc:e.SrcAlphaFactor,blendSrcAlpha:e.SrcAlphaFactor,blendDst:e.OneMinusSrcAlphaFactor,blendDstAlpha:e.OneMinusSrcAlphaFactor}),this.renderTargetCopyMaterial.extensions.fragDepth=!0,this.renderTargetCopyQuad=new e.Mesh(new e.PlaneGeometry(2,2),this.renderTargetCopyMaterial),this.renderTargetCopyCamera=new e.OrthographicCamera(-1,1,1,-1,0,1)}setupMeshCursor(){if(!this.meshCursor){const t=new e.ConeGeometry(.5,1.5,32),n=new e.MeshBasicMaterial({color:16777215}),r=new e.Mesh(t,n);r.rotation.set(0,0,Math.PI),r.position.set(0,1,0);const s=new e.Mesh(t,n);s.position.set(0,-1,0);const o=new e.Mesh(t,n);o.rotation.set(0,0,Math.PI/2),o.position.set(1,0,0);const i=new e.Mesh(t,n);i.rotation.set(0,0,-Math.PI/2),i.position.set(-1,0,0),this.meshCursor=new e.Object3D,this.meshCursor.add(r),this.meshCursor.add(s),this.meshCursor.add(o),this.meshCursor.add(i),this.meshCursor.scale.set(.1,.1,.1),this.scene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(this.meshCursor.children.forEach((e=>{e.geometry.dispose(),e.material.dispose()})),this.scene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const t=new e.SphereGeometry(.5,32,32),n=L.buildFocusMarkerMaterial();n.depthTest=!1,n.depthWrite=!1,n.transparent=!0;const r=new e.Mesh(t,n);this.focusMarker=r}}updateFocusMarker=function(){const t=new e.Vector3,n=new e.Matrix4;return function(e,r,s){n.copy(r.matrixWorld).invert(),t.copy(e).applyMatrix4(n),t.normalize().multiplyScalar(10),t.applyMatrix4(r.matrixWorld),this.focusMarker.position.copy(t),this.focusMarker.material.uniforms.realFocusPosition.value.copy(e),this.focusMarker.material.uniforms.viewport.value.copy(s),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){const t=new e.PlaneGeometry(1,1);t.rotateX(-Math.PI/2);const n=new e.MeshBasicMaterial({color:16777215});n.transparent=!0,n.opacity=.6,n.depthTest=!1,n.depthWrite=!1,n.side=e.DoubleSide;const r=new e.Mesh(t,n),s=new e.Vector3(0,1,0);s.normalize();const o=new e.Vector3(0,0,0),i=new z(s,o,.5,.01,56576,.1,.03);this.controlPlane=new e.Object3D,this.controlPlane.add(r),this.controlPlane.add(i)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const t=new e.Quaternion,n=new e.Vector3(0,1,0);return function(e,r){t.setFromUnitVectors(n,r),this.controlPlane.position.copy(e),this.controlPlane.quaternion.copy(t)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.scene.add(this.debugRoot),this.scene.add(this.secondaryDebugRoot)}createDebugMeshes(t){const n=new e.SphereGeometry(1,32,32),r=new e.Object3D,s=(s,o)=>{let i=new e.Mesh(n,L.buildDebugMaterial(s));i.renderOrder=t,r.add(i),i.position.fromArray(o)};return s(16711680,[-50,0,0]),s(16711680,[50,0,0]),s(65280,[0,0,-50]),s(65280,[0,0,50]),s(16755200,[5,0,5]),r}createSecondaryDebugMeshes(t){const n=new e.BoxGeometry(3,3,3),r=new e.Object3D;const s=s=>{let o=new e.Mesh(n,L.buildDebugMaterial(12303291));o.renderOrder=t,r.add(o),o.position.fromArray(s)};let o=10;return s([-10,0,-10]),s([-10,0,o]),s([o,0,-10]),s([o,0,o]),r}static buildDebugMaterial(t){const n={color:{type:"v3",value:new e.Color(t)}},r=new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:e.FrontSide});return r.extensions.fragDepth=!0,r}static buildFocusMarkerMaterial(t){const n={color:{type:"v3",value:new e.Color(t)},realFocusPosition:{type:"v3",value:new e.Vector3},viewport:{type:"v2",value:new e.Vector2},opacity:{value:0}};return new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:e.FrontSide})}}const U=new e.Vector3(1,0,0),V=new e.Vector3(0,1,0),O=new e.Vector3(0,0,1);class N{constructor(t=new e.Vector3,n=new e.Vector3){this.origin=new e.Vector3,this.direction=new e.Vector3,this.setParameters(t,n)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,n){return!(t.x<e.min.x-n||t.x>e.max.x+n||t.y<e.min.y-n||t.y>e.max.y+n||t.z<e.min.z-n||t.z>e.max.z+n)}intersectBox=function(){const t=new e.Vector3,n=[],r=[],s=[];return function(e,o){if(r[0]=this.origin.x,r[1]=this.origin.y,r[2]=this.origin.z,s[0]=this.direction.x,s[1]=this.direction.y,s[2]=this.direction.z,this.boxContainsPoint(e,this.origin,1e-4))return o&&(o.origin.copy(this.origin),o.normal.set(0,0,0),o.distance=-1),!0;for(let i=0;i<3;i++){if(0==s[i])continue;const a=0==i?U:1==i?V:O,c=s[i]<0?e.max:e.min;let l=-Math.sign(s[i]);n[0]=0==i?c.x:1==i?c.y:c.z;let h=n[0]-r[i];if(h*l<0){const c=(i+1)%3,d=(i+2)%3;if(n[2]=s[c]/s[i]*h+r[c],n[1]=s[d]/s[i]*h+r[d],t.set(n[i],n[d],n[c]),this.boxContainsPoint(e,t,1e-4))return o&&(o.origin.copy(t),o.normal.copy(a).multiplyScalar(l),o.distance=t.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const t=new e.Vector3;return function(e,n,r){t.copy(e).sub(this.origin);const s=t.dot(this.direction),o=s*s,i=t.dot(t)-o,a=n*n;if(i>a)return!1;const c=Math.sqrt(a-i),l=s-c,h=s+c;if(h<0)return!1;let d=l<0?h:l;return r&&(r.origin.copy(this.origin).addScaledVector(this.direction,d),r.normal.copy(r.origin).sub(e).normalize(),r.distance=d),!0}}()}class j{constructor(){this.origin=new e.Vector3,this.normal=new e.Vector3,this.distance=0}set(e,t,n){this.origin.copy(e),this.normal.copy(t),this.distance=n}clone(){const e=new j;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e}}class H{constructor(e,t){this.ray=new N(e,t)}setFromCameraAndScreenPosition=function(){const t=new e.Vector2;return function(e,n,r){if(t.x=n.x/r.x*2-1,t.y=(r.y-n.y)/r.y*2-1,e.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e;else{if(!e.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(n.x,n.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e}}}();intersectSplatMesh=function(){const t=new e.Matrix4,n=new e.Matrix4,r=new N;return function(e,s=[]){n.copy(e.matrixWorld),t.copy(n).invert(),r.origin.copy(this.ray.origin).applyMatrix4(t),r.direction.copy(this.ray.direction).transformDirection(t);const o=e.getSplatTree();return o.rootNode&&this.castRayAtSplatTreeNode(r,o,o.rootNode,s),s.sort(((e,t)=>e.distance>t.distance?1:-1)),s.forEach((e=>{e.origin.applyMatrix4(n),e.normal.transformDirection(n)})),s}}();castRayAtSplatTreeNode=function(){const t=new e.Vector3,n=new e.Vector3,r=new e.Quaternion,s=new j,o=1e-7;return function(e,i,a,c=[]){if(e.intersectBox(a.boundingBox)){if(a.data.indexes&&a.data.indexes.length>0)for(let l=0;l<a.data.indexes.length;l++){const h=a.data.indexes[l],d=i.getSplatLocalIndex(h),p=i.getSplatBufferForSplat(h),u=i.getTransformForSplat(h);if(p.getCenter(d,t,u),p.getScaleAndRotation(d,n,r,u),n.x<=o||n.y<=o||n.z<=o)continue;const m=(n.x+n.y+n.z)/3;e.intersectSphere(t,m,s)&&c.push(s.clone())}if(a.children&&a.children.length>0)for(let t of a.children)this.castRayAtSplatTreeNode(e,i,t,c);return c}}}()}let W=0;class G{constructor(t,n,r,s){this.min=(new e.Vector3).copy(t),this.max=(new e.Vector3).copy(n),this.boundingBox=new e.Box3(this.min,this.max),this.center=(new e.Vector3).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=r,this.children=[],this.data=null,this.id=s||W++}}class Y{constructor(t,n){this.maxDepth=t,this.maxCentersPerNode=n,this.splatMesh=[],this.sceneDimensions=new e.Vector3,this.sceneMin=new e.Vector3,this.sceneMax=new e.Vector3,this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.globalSplatIndexToLocalSplatIndexMap={},this.globalSplatIndexToSplatBufferIndexMap={}}getSplatBufferForSplat(e){return this.splatMesh.splatBuffers[this.globalSplatIndexToSplatBufferIndexMap[e]]}getTransformForSplat(e){return this.splatMesh.splatTransforms[this.globalSplatIndexToSplatBufferIndexMap[e]]}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}processSplatMesh(t,n=(()=>!0)){const r=new e.Vector3;this.splatMesh=t,this.sceneMin=new e.Vector3,this.sceneMax=new e.Vector3,this.addedIndexes={},this.nodesWithIndexes=[],this.globalSplatIndexToLocalSplatIndexMap={},this.globalSplatIndexToSplatBufferIndexMap={};let s=0,o=0;for(let e=0;e<this.splatMesh.splatBuffers.length;e++){const t=this.splatMesh.splatBuffers[e],i=t.getSplatCount(),a=this.splatMesh.splatTransforms[e];for(let c=0;c<i;c++)n(e,t,c,a)&&(t.getCenter(c,r,a),(0===o||r.x<this.sceneMin.x)&&(this.sceneMin.x=r.x),(0===o||r.x>this.sceneMax.x)&&(this.sceneMax.x=r.x),(0===o||r.y<this.sceneMin.y)&&(this.sceneMin.y=r.y),(0===o||r.y>this.sceneMax.y)&&(this.sceneMax.y=r.y),(0===o||r.z<this.sceneMin.z)&&(this.sceneMin.z=r.z),(0===o||r.z>this.sceneMax.z)&&(this.sceneMax.z=r.z),o++),this.globalSplatIndexToLocalSplatIndexMap[s]=c,this.globalSplatIndexToSplatBufferIndexMap[s]=e,s++}this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);const i=[];for(let e=0;e<s;e++){const t=this.getSplatLocalIndex(e);n(this.globalSplatIndexToSplatBufferIndexMap[e],this.getSplatBufferForSplat(e),t,this.getTransformForSplat(e))&&i.push(e)}this.rootNode=new G(this.sceneMin,this.sceneMax,0),this.rootNode.data={indexes:i},this.processNode(this.rootNode,t)}processNode(t,n){const r=t.data.indexes.length;if(r<this.maxCentersPerNode||t.depth>this.maxDepth){const e=[];for(let n=0;n<t.data.indexes.length;n++)this.addedIndexes[t.data.indexes[n]]||(e.push(t.data.indexes[n]),this.addedIndexes[t.data.indexes[n]]=!0);return t.data.indexes=e,void this.nodesWithIndexes.push(t)}const s=(new e.Vector3).copy(t.max).sub(t.min),o=(new e.Vector3).copy(s).multiplyScalar(.5),i=(new e.Vector3).copy(t.min).add(o),a=[new e.Box3(new e.Vector3(i.x-o.x,i.y,i.z-o.z),new e.Vector3(i.x,i.y+o.y,i.z)),new e.Box3(new e.Vector3(i.x,i.y,i.z-o.z),new e.Vector3(i.x+o.x,i.y+o.y,i.z)),new e.Box3(new e.Vector3(i.x,i.y,i.z),new e.Vector3(i.x+o.x,i.y+o.y,i.z+o.z)),new e.Box3(new e.Vector3(i.x-o.x,i.y,i.z),new e.Vector3(i.x,i.y+o.y,i.z+o.z)),new e.Box3(new e.Vector3(i.x-o.x,i.y-o.y,i.z-o.z),new e.Vector3(i.x,i.y,i.z)),new e.Box3(new e.Vector3(i.x,i.y-o.y,i.z-o.z),new e.Vector3(i.x+o.x,i.y,i.z)),new e.Box3(new e.Vector3(i.x,i.y-o.y,i.z),new e.Vector3(i.x+o.x,i.y,i.z+o.z)),new e.Box3(new e.Vector3(i.x-o.x,i.y-o.y,i.z),new e.Vector3(i.x,i.y,i.z+o.z))],c=[],l=[];for(let e=0;e<a.length;e++)c[e]=0,l[e]=[];const h=new e.Vector3;for(let e=0;e<r;e++){const n=t.data.indexes[e],r=this.getSplatLocalIndex(n),s=this.getSplatBufferForSplat(n),o=this.getTransformForSplat(n);s.getCenter(r,h,o);for(let e=0;e<a.length;e++)a[e].containsPoint(h)&&(c[e]++,l[e].push(n))}for(let e=0;e<a.length;e++){const n=new G(a[e].min,a[e].max,t.depth+1);n.data={indexes:l[e]},t.children.push(n)}t.data={};for(let e of t.children)this.processNode(e,n)}countLeaves(){let e=0;return this.visitLeaves((()=>{e++})),e}visitLeaves(e){const t=(e,n)=>{0===e.children.length&&n(e);for(let r of e.children)t(r,n)};return t(this.rootNode,e)}}class Q extends e.Mesh{constructor(e=!1,t=1,n=!0){super({morphAttributes:{},fake:!0},null),this.renderer=void 0,this.halfPrecisionCovariancesOnGPU=e,this.devicePixelRatio=t,this.enableDistancesComputationOnGPU=n,this.splatBuffers=[],this.splatTree=null,this.splatDataTextures=null,this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,outDistancesBuffer:null,centersLoc:-1,viewProjLoc:-1}}static buildMaterial(){const t={covariancesTexture:{type:"t",value:null},centersColorsTexture:{type:"t",value:null},focal:{type:"v2",value:new e.Vector2},viewport:{type:"v2",value:new e.Vector2},basisViewport:{type:"v2",value:new e.Vector2},debugColor:{type:"v3",value:new e.Color},covariancesTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},centersColorsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)}};return new e.ShaderMaterial({uniforms:t,vertexShader:"\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n\n                // compute the coef of alpha based on the detemintant\n                float kernel_size = 0.1;\n                float det_0 = max(1e-6, cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1]);\n                float det_1 = max(1e-6, (cov2Dm[0][0] + kernel_size) * (cov2Dm[1][1] + kernel_size) - cov2Dm[0][1] * cov2Dm[0][1]);\n                float coef = sqrt(det_0 / (det_1+1e-6) + 1e-6);\n\n                if (det_0 <= 1e-6 || det_1 <= 1e-6){\n                    coef = 0.0f;\n                }\n\n                cov2Dm[0][0] += kernel_size;\n                cov2Dm[1][1] += kernel_size;\n                vColor.a *= coef;\n                \n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            }",fragmentShader:"\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }",transparent:!0,alphaTest:1,blending:e.NormalBlending,depthTest:!0,depthWrite:!1,side:e.DoubleSide})}static buildGeomtery(t){let n=Q.getTotalSplatCount(t);const r=new e.BufferGeometry;r.setIndex([0,1,2,0,2,3]);const s=new Float32Array(12),o=new e.BufferAttribute(s,3);r.setAttribute("position",o),o.setXYZ(0,-1,-1,0),o.setXYZ(1,-1,1,0),o.setXYZ(2,1,1,0),o.setXYZ(3,1,-1,0),o.needsUpdate=!0;const i=(new e.InstancedBufferGeometry).copy(r),a=new Uint32Array(n),c=new e.InstancedBufferAttribute(a,1,!1);return c.setUsage(e.DynamicDrawUsage),i.setAttribute("splatIndex",c),i.instanceCount=n,i}dispose(){this.disposeMeshData(),this.enableDistancesComputationOnGPU&&this.disposeGPUResources()}disposeMeshData(){this.geometry&&!this.geometry.fake&&(this.geometry.dispose(),this.geometry=null);for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null,this.material&&(this.material.dispose(),this.material=null),this.splatTree=null}build(e,t){this.disposeMeshData(),this.splatBuffers=e,this.splatBufferOptions=t,this.buildSplatTransforms(),this.geometry=Q.buildGeomtery(this.splatBuffers),this.material=Q.buildMaterial(),this.buildSplatTree(),this.enableDistancesComputationOnGPU&&this.setupDistancesTransformFeedback(),this.resetLocalSplatDataAndTexturesFromSplatBuffer()}buildSplatTransforms(){this.splatTransforms=[];for(let t of this.splatBufferOptions)if(t){let n=t.position||[0,0,0],r=t.rotation||[0,0,0,1],s=t.scale||[1,1,1];const o=(new e.Vector3).fromArray(n),i=(new e.Quaternion).fromArray(r),a=(new e.Vector3).fromArray(s),c=new e.Matrix4;c.compose(o,i,a),this.splatTransforms.push(c)}}buildSplatTree(){this.splatTree=new Y(8,1e3),console.time("SplatTree build");const t=new e.Vector4;this.splatTree.processSplatMesh(this,((e,n,r,s)=>{n.getColor(r,t,s);const o=this.splatBufferOptions[e];return t.w>(o.splatAlphaRemovalThreshold||1)})),console.timeEnd("SplatTree build");let n=0,r=0,s=0,o=0;this.splatTree.visitLeaves((e=>{const t=e.data.indexes.length;t>0&&(r+=t,s=Math.max(s,t),o++,n++)})),console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${n}`),r/=o,console.log(`Avg splat count per node: ${r}`)}getSplatTree(){return this.splatTree}resetLocalSplatDataAndTexturesFromSplatBuffer(){this.updateLocalSplatDataFromSplatBuffer(),this.allocateAndStoreLocalSplatDataInTextures(),this.enableDistancesComputationOnGPU&&this.updateCentersGPUBufferForDistancesComputation()}updateLocalSplatDataFromSplatBuffer(){const e=this.getSplatCount();this.covariances=new Float32Array(6*e),this.centers=new Float32Array(3*e),this.colors=new Uint8Array(4*e);let t=0;for(let e=0;e<this.splatBuffers.length;e++){const n=this.splatBuffers[e],r=this.splatTransforms[e];n.fillCovarianceArray(this.covariances,t,r),n.fillCenterArray(this.centers,t,r),n.fillColorArray(this.colors,t,r),t+=n.getSplatCount()}}allocateAndStoreLocalSplatDataInTextures(){const t=this.getSplatCount(),n=new e.Vector2(4096,1024);for(;n.x*n.y*2<6*t;)n.y*=2;const r=new e.Vector2(4096,1024);for(;r.x*r.y*4<4*t;)r.y*=2;let s,o;if(this.halfPrecisionCovariancesOnGPU){o=new Uint16Array(n.x*n.y*2);for(let t=0;t<this.covariances.length;t++)o[t]=e.DataUtils.toHalfFloat(this.covariances[t]);s=new e.DataTexture(o,n.x,n.y,e.RGFormat,e.HalfFloatType)}else o=new Float32Array(n.x*n.y*2),o.set(this.covariances),s=new e.DataTexture(o,n.x,n.y,e.RGFormat,e.FloatType);s.needsUpdate=!0,this.material.uniforms.covariancesTexture.value=s,this.material.uniforms.covariancesTextureSize.value.copy(n);const i=new Uint32Array(r.x*r.y*4);for(let e=0;e<t;e++){const t=4*e,n=3*e,r=4*e;i[r]=(a=this.colors[t],c=this.colors[t+1],l=this.colors[t+2],h=this.colors[t+3],a+(c<<8)+(l<<16)+(h<<24)),i[r+1]=d(this.centers[n]),i[r+2]=d(this.centers[n+1]),i[r+3]=d(this.centers[n+2])}var a,c,l,h;const p=new e.DataTexture(i,r.x,r.y,e.RGBAIntegerFormat,e.UnsignedIntType);p.internalFormat="RGBA32UI",p.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=p,this.material.uniforms.centersColorsTextureSize.value.copy(r),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={covariances:{data:o,texture:s,size:n},centerColors:{data:i,texture:p,size:r}}}updateSplatDataToDataTextures(){this.updateLocalCovarianceDataToDataTexture(),this.updateLocalCenterColorDataToDataTexture()}updateLocalCovarianceDataToDataTexture(){this.splatDataTextures.covariances.data.set(this.covariances),this.splatDataTextures.covariances.texture.needsUpdate=!0}updateLocalCenterColorDataToDataTexture(){this.splatDataTextures.centerColors.data.set(this.centerColors),this.splatDataTextures.centerColors.texture.needsUpdate=!0}updateIndexes(e,t){const n=this.geometry;n.attributes.splatIndex.set(e),n.attributes.splatIndex.needsUpdate=!0,n.instanceCount=t}updateUniforms=function(){const t=new e.Vector2;return function(e,n,r){this.getSplatCount()>0&&(t.set(e.x*this.devicePixelRatio,e.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(t),this.material.uniforms.basisViewport.value.set(2/t.x,2/t.y),this.material.uniforms.focal.value.set(n,r),this.material.uniformsNeedUpdate=!0)}}();getSplatDataTextures(){return this.splatDataTextures}getSplatCount(){return Q.getTotalSplatCount(this.splatBuffers)}static getTotalSplatCount(e){let t=0;for(let n of e)t+=n.getSplatCount();return t}disposeGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(e){e!==this.renderer&&(this.renderer=e,this.enableDistancesComputationOnGPU&&this.getSplatCount()>0&&(this.setupDistancesTransformFeedback(),this.updateCentersGPUBufferForDistancesComputation()))}setupDistancesTransformFeedback=function(){let e,t;return function(){const n=this.getSplatCount();if(!this.renderer||e===this.renderer&&t===n)return;const r=e!==this.renderer,s=t!==n;r?this.disposeGPUResources():s&&this.disposeGPUBufferResources();const o=this.renderer.getContext(),i=(e,t,n)=>{const r=e.createShader(t);if(!r)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(r,n),e.compileShader(r);if(!e.getShaderParameter(r,e.COMPILE_STATUS)){let n="unknown";t===e.VERTEX_SHADER?n="vertex shader":t===e.FRAGMENT_SHADER&&(n="fragement shader");const s=e.getShaderInfoLog(r);return console.error("Failed to compile "+n+" with these errors:"+s),e.deleteShader(r),null}return r},a=o.getParameter(o.VERTEX_ARRAY_BINDING),c=o.getParameter(o.CURRENT_PROGRAM);if(r&&(this.distancesTransformFeedback.vao=o.createVertexArray()),o.bindVertexArray(this.distancesTransformFeedback.vao),r){const e=o.createProgram(),t=i(o,o.VERTEX_SHADER,"#version 300 es\n                in ivec3 center;\n                uniform ivec3 viewProj;\n                flat out int distance;\n                void main(void) {\n                    distance = center.x * viewProj.x + center.y * viewProj.y + center.z * viewProj.z;\n                }\n            "),n=i(o,o.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!n)throw new Error("Could not compile shaders for distances computation on GPU.");o.attachShader(e,t),o.attachShader(e,n),o.transformFeedbackVaryings(e,["distance"],o.SEPARATE_ATTRIBS),o.linkProgram(e);if(!o.getProgramParameter(e,o.LINK_STATUS)){const r=o.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+r),o.deleteProgram(e),o.deleteShader(n),o.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=n}o.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=o.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.distancesTransformFeedback.viewProjLoc=o.getUniformLocation(this.distancesTransformFeedback.program,"viewProj"),(r||s)&&(this.distancesTransformFeedback.centersBuffer=o.createBuffer(),o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),o.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),o.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,3,o.INT,0,0)),(r||s)&&(this.distancesTransformFeedback.outDistancesBuffer=o.createBuffer()),o.bindBuffer(o.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),o.bufferData(o.ARRAY_BUFFER,4*n,o.DYNAMIC_COPY),r&&(this.distancesTransformFeedback.id=o.createTransformFeedback()),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),o.bindBufferBase(o.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),c&&o.useProgram(c),a&&o.bindVertexArray(a),e=this.renderer,t=n}}();getIntegerCenters(e){const t=this.getSplatCount(),n=new Float32Array(this.centers);let r,s=e?4:3;r=new Int32Array(t*s);for(let o=0;o<t;o++){for(let e=0;e<3;e++)r[o*s+e]=Math.round(1e3*n[3*o+e]);e&&(r[o*s+3]=1)}return r}getIntegerMatrixArray(e){const t=e.elements,n=[];for(let e=0;e<16;e++)n[e]=Math.round(1e3*t[e]);return n}updateCentersGPUBufferForDistancesComputation(){if(!this.renderer)return;const e=this.renderer.getContext(),t=e.getParameter(e.VERTEX_ARRAY_BINDING);e.bindVertexArray(this.distancesTransformFeedback.vao);const n=this.getIntegerCenters(!1);e.bindBuffer(e.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e.bufferData(e.ARRAY_BUFFER,n,e.STATIC_DRAW),t&&e.bindVertexArray(t)}computeDistancesOnGPU(e,t){if(!this.renderer)return;const n=this.getIntegerMatrixArray(e),r=[n[2],n[6],n[10]],s=this.renderer.getContext(),o=s.getParameter(s.VERTEX_ARRAY_BINDING),i=s.getParameter(s.CURRENT_PROGRAM);s.bindVertexArray(this.distancesTransformFeedback.vao),s.useProgram(this.distancesTransformFeedback.program),s.enable(s.RASTERIZER_DISCARD),s.uniform3i(this.distancesTransformFeedback.viewProjLoc,r[0],r[1],r[2]),s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),s.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,3,s.INT,0,0),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),s.beginTransformFeedback(s.POINTS),s.drawArrays(s.POINTS,0,this.getSplatCount()),s.endTransformFeedback(),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,null),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),s.disable(s.RASTERIZER_DISCARD),s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),s.getBufferSubData(s.ARRAY_BUFFER,0,t),s.bindBuffer(s.ARRAY_BUFFER,null),i&&s.useProgram(i),o&&s.bindVertexArray(o)}}class K{static DepthMapRange=65536;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4}function X(e){let t,n,r,s,o,i,a,c,l,h,d,p;e.onmessage=u=>{if(u.data.centers)centers=u.data.centers,new Int32Array(n,l,4*r).set(new Int32Array(centers)),e.postMessage({sortSetupComplete:!0});else if(u.data.sort){const m=u.data.sort.splatRenderCount||0;!function(u,m,f,y){const g=performance.now();d||(d=new Uint32Array(p.DepthMapRange)),new Int32Array(n,h,16).set(f),new Uint32Array(n,c,p.DepthMapRange).set(d),t.exports.sortIndexes(s,l,i,a,c,h,o,p.DepthMapRange,u,m,r,y);const C=performance.now();e.postMessage({sortDone:!0,splatSortCount:u,splatRenderCount:m,sortTime:C-g})}(u.data.sort.splatSortCount||0,m,u.data.sort.viewProj,u.data.sort.usePrecomputedDistances)}else if(u.data.init){p=u.data.init.Constants,r=u.data.init.splatCount;const d=4*p.BytesPerInt,m=new Uint8Array(u.data.init.sorterWasmBytes),f=r*p.BytesPerInt,y=r*d,g=16*p.BytesPerFloat,C=r*p.BytesPerInt,A=r*p.BytesPerInt,v=r*p.BytesPerInt,w=p.DepthMapRange*p.BytesPerInt*2,x=32*p.MemoryPageSize,b=f+y+g+C+A+v+w+x,M=Math.floor(b/p.MemoryPageSize)+1,S={module:{},env:{memory:new WebAssembly.Memory({initial:2*M,maximum:4*M,shared:!0})}};WebAssembly.compile(m).then((e=>WebAssembly.instantiate(e,S))).then((r=>{t=r,s=0,l=s+f,h=l+y,i=h+g,a=i+C,c=a+A,o=c+w,n=S.env.memory.buffer,e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:n,indexesToSortOffset:s,sortedIndexesBuffer:n,sortedIndexesOffset:o,precomputedDistancesBuffer:n,precomputedDistancesOffset:i})}))}}}function $(e){const t=new Worker(URL.createObjectURL(new Blob(["(",X.toString(),")(self)"],{type:"application/javascript"}))),n=atob("AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEXA2AAAGAMf39/f39/f39/f39/AGAAAX8CEgEDZW52Bm1lbW9yeQIDAICABAMEAwABAgc5AxFfX3dhc21fY2FsbF9jdG9ycwAAC3NvcnRJbmRleGVzAAETZW1zY3JpcHRlbl90bHNfaW5pdAACCtUEAwMAAQvJBAICewJ9IAkgCGshCgJAIAsEQEH4////ByELQYiAgIB4IQggCSAKTQ0BIAohBQNAIAMgBUECdCIBaiACIAAgAWooAgBBAnRqKAIAIgE2AgAgASALIAEgC0gbIQsgASAIIAEgCEobIQggBUEBaiIFIAlHDQALDAELQfj///8HIQtBiICAgHghCCAJIApNDQAgBUEoaiAFQRhqIAX9CQII/VYCAAH9VgIAAiENIAohBQNAIAMgBUECdCICaiABIAAgAmooAgBBBHRq/QAAACAN/bUBIgz9GwAgDP0bAWogDP0bAmoiAjYCACACIAsgAiALSBshCyACIAggAiAIShshCCAFQQFqIgUgCUcNAAsLIAkgCksEQCAHQQFrsyAIsiALspOVIQ4gCiEIA0ACfyAOIAMgCEECdGoiASgCACALa7KUIg+LQwAAAE9dBEAgD6gMAQtBgICAgHgLIQUgASAFNgIAIAQgBUECdGoiASABKAIAQQFqNgIAIAhBAWoiCCAJRw0ACwsgB0ECTwRAIAQoAgAhCEEBIQsDQCAEIAtBAnRqIgEgASgCACAIaiIINgIAIAtBAWoiCyAHRw0ACwsgCkEASgRAIAohCwNAIAYgC0EBayIBQQJ0IgJqIAAgAmooAgA2AgAgC0EBSiECIAEhCyACDQALCyAJIApKBEAgCSELA0AgBiAJIAQgAyALQQFrIgtBAnQiAWooAgBBAnRqIgIoAgAiBWtBAnRqIAAgAWooAgA2AgAgAiAFQQFrNgIAIAogC0gNAAsLCwQAQQAL"),r=new Uint8Array(n.length);for(let e=0;e<n.length;e++)r[e]=n.charCodeAt(e);return t.postMessage({init:{sorterWasmBytes:r.buffer,splatCount:e,Constants:{BytesPerFloat:K.BytesPerFloat,BytesPerInt:K.BytesPerInt,DepthMapRange:K.DepthMapRange,MemoryPageSize:K.MemoryPageSize}}}),t}class Z{constructor(t={}){t.cameraUp||(t.cameraUp=[0,1,0]),t.initialCameraPosition||(t.initialCameraPosition=[0,10,15]),t.initialCameraLookAt||(t.initialCameraLookAt=[0,0,0]),void 0===t.selfDrivenMode&&(t.selfDrivenMode=!0),void 0===t.useBuiltInControls&&(t.useBuiltInControls=!0),this.rootElement=t.rootElement,this.ignoreDevicePixelRatio=t.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio,void 0===t.halfPrecisionCovariancesOnGPU&&(t.halfPrecisionCovariancesOnGPU=!0),this.halfPrecisionCovariancesOnGPU=t.halfPrecisionCovariancesOnGPU,this.cameraUp=(new e.Vector3).fromArray(t.cameraUp),this.initialCameraPosition=(new e.Vector3).fromArray(t.initialCameraPosition),this.initialCameraLookAt=(new e.Vector3).fromArray(t.initialCameraLookAt),this.scene=t.scene,this.renderer=t.renderer,this.camera=t.camera,this.useBuiltInControls=t.useBuiltInControls,this.controls=null,this.selfDrivenMode=t.selfDrivenMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),this.gpuAcceleratedSort=t.gpuAcceleratedSort,!0!==this.gpuAcceleratedSort&&!1!==this.gpuAcceleratedSort&&(this.isMobile()?this.gpuAcceleratedSort=!1:this.gpuAcceleratedSort=!0),this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.splatMesh=null,this.selfDrivenModeRunning=!1,this.splatRenderingInitialized=!1,this.raycaster=new H,this.infoPanel=null,this.infoPanelCells={},this.currentFPS=0,this.lastSortTime=0,this.previousCameraTarget=new e.Vector3,this.nextCameraTarget=new e.Vector3,this.mousePosition=new e.Vector2,this.mouseDownPosition=new e.Vector2,this.mouseDownTime=null,this.loadingSpinner=new _(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.usingExternalCamera=void 0,this.usingExternalRenderer=void 0,this.initializeFromExternalUpdate=t.initializeFromExternalUpdate||!1,this.initialized=!1,this.initializeFromExternalUpdate||this.init()}init(){if(this.initialized)return;this.initializeFromExternalUpdate?(this.usingExternalCamera=!0,this.usingExternalRenderer=!0):(this.usingExternalCamera=!!this.camera,this.usingExternalRenderer=!!this.renderer),this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement.parentElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement)));const t=new e.Vector2;if(this.getRenderDimensions(t),this.usingExternalCamera||(this.camera=new e.PerspectiveCamera(50,t.x/t.y,.1,500),this.camera.position.copy(this.initialCameraPosition),this.camera.lookAt(this.initialCameraLookAt),this.camera.up.copy(this.cameraUp).normalize()),this.usingExternalRenderer||(this.renderer=new e.WebGLRenderer({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(0,0,0,0),this.renderer.setSize(t.x,t.y)),this.scene=this.scene||new e.Scene,this.sceneHelper=new L(this.scene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.useBuiltInControls&&(this.controls=new I(this.camera,this.renderer.domElement),this.controls.listenToKeyEvents(window),this.controls.rotateSpeed=.5,this.controls.maxPolarAngle=.75*Math.PI,this.controls.minPolarAngle=.1,this.controls.enableDamping=!0,this.controls.dampingFactor=.05,this.controls.target.copy(this.initialCameraLookAt),this.rootElement.addEventListener("pointermove",this.onMouseMove.bind(this),!1),this.rootElement.addEventListener("pointerdown",this.onMouseDown.bind(this),!1),this.rootElement.addEventListener("pointerup",this.onMouseUp.bind(this),!1),window.addEventListener("keydown",this.onKeyDown.bind(this),!1)),!this.usingExternalRenderer){new ResizeObserver((()=>{this.getRenderDimensions(t),this.renderer.setSize(t.x,t.y)})).observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}this.setupInfoPanel(),this.loadingSpinner.setContainer(this.rootElement),this.initialized=!0}onKeyDown=function(){const t=new e.Vector3,n=new e.Matrix4,r=new e.Matrix4;return function(e){switch(t.set(0,0,-1),t.transformDirection(this.camera.matrixWorld),n.makeRotationAxis(t,Math.PI/128),r.makeRotationAxis(t,-Math.PI/128),e.code){case"ArrowLeft":this.camera.up.transformDirection(n);break;case"ArrowRight":this.camera.up.transformDirection(r);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyP":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.style.display="block":this.infoPanel.style.display="none"}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=m()}onMouseUp=function(){const t=new e.Vector2,n=new e.Vector2,r=new e.Vector3,s=[];return function(e){n.copy(this.mousePosition).sub(this.mouseDownPosition);const o=m()-this.mouseDownTime<.5&&n.length()<2;if(!this.transitioningCameraTarget&&o&&(this.getRenderDimensions(t),s.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.mousePosition.set(e.offsetX,e.offsetY),this.raycaster.intersectSplatMesh(this.splatMesh,s),s.length>0)){const e=s[0].origin;r.copy(e).sub(this.camera.position),r.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=m())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setupInfoPanel(){this.infoPanel=document.createElement("div"),this.infoPanel.style.position="absolute",this.infoPanel.style.padding="10px",this.infoPanel.style.backgroundColor="#cccccc",this.infoPanel.style.border="#aaaaaa 1px solid",this.infoPanel.style.zIndex=100,this.infoPanel.style.width="375px",this.infoPanel.style.fontFamily="arial",this.infoPanel.style.fontSize="10pt",this.infoPanel.style.textAlign="left";const e=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Cursor position","cursorPosition"],["FPS","fps"],["Render window","renderWindow"],["Rendering:","renderSplatCount"],["Sort time","sortTime"]],t=document.createElement("div");t.style.display="table";for(let n of e){const e=document.createElement("div");e.style.display="table-row";const r=document.createElement("div");r.style.display="table-cell",r.style.width="110px",r.innerHTML=`${n[0]}: `;const s=document.createElement("div");s.style.display="table-cell",s.style.width="10px",s.innerHTML=" ";const o=document.createElement("div");o.style.display="table-cell",o.innerHTML="",this.infoPanelCells[n[1]]=o,e.appendChild(r),e.appendChild(s),e.appendChild(o),t.appendChild(e)}this.infoPanel.appendChild(t),this.infoPanel.style.display="none",this.renderer.domElement.parentElement.prepend(this.infoPanel)}updateSplatMeshUniforms=function(){const t=new e.Vector2;return function(){if(!this.splatMesh)return;this.splatMesh.getSplatCount()>0&&(this.getRenderDimensions(t),this.cameraFocalLengthX=this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*t.x*.45,this.cameraFocalLengthY=this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*t.y*.45,this.splatMesh.updateUniforms(t,this.cameraFocalLengthX,this.cameraFocalLengthY))}}();loadFile(e,t={}){return!1!==t.showLoadingSpinner&&(t.showLoadingSpinner=!0),new Promise(((n,r)=>{t.showLoadingSpinner&&this.loadingSpinner.show();this.loadFileToSplatBuffer(e,t.splatAlphaRemovalThreshold,((e,n)=>{if(t.showLoadingSpinner)if(100==e)this.loadingSpinner.setMessage("Download complete!");else{const e=n?`: ${n}`:"...";this.loadingSpinner.setMessage(`Downloading${e}`)}t.onProgress&&t.onProgress(e,n,"downloading")})).then((e=>{t.showLoadingSpinner&&this.loadingSpinner.hide(),t.onProgress&&t.onProgress(0,"0%","processing");const r={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};this.loadSplatBuffersIntoMesh([e],[r],t.showLoadingSpinner).then((()=>{t.onProgress&&t.onProgress(100,"100%","processing"),n()}))})).catch((t=>{r(new Error(`Viewer::loadFile -> Could not load file ${e}`))}))}))}loadFiles(e,t=!0,n=void 0){return new Promise(((r,s)=>{const o=e.length,i=[];t&&this.loadingSpinner.show();const a=(e,r,s)=>{i[e]=r;let a=0;for(let e=0;e<o;e++)a+=i[e]||0;a/=o,s=`${a.toFixed(2)}%`,t&&(100==a?this.loadingSpinner.setMessage("Download complete!"):this.loadingSpinner.setMessage(`Downloading: ${s}`)),n&&n(a,s,"downloading")},c=[];for(let t=0;t<e.length;t++){const n=e[t]||{},r=this.loadFileToSplatBuffer(e[t].path,n.splatAlphaRemovalThreshold,a.bind(this,t));c.push(r)}Promise.all(c).then((s=>{t&&this.loadingSpinner.hide(),n&&options.onProgress(0,"0%","processing"),this.loadSplatBuffersIntoMesh(s,e,t).then((()=>{n&&n(100,"100%","processing"),r()}))})).catch((e=>{s(new Error("Viewer::loadFiles -> Could not load one or more files."))}))}))}loadFileToSplatBuffer(e,t=1,n=void 0){const r=(e,t)=>{n&&n(e,t,"downloading")};return new Promise(((n,s)=>{let o;T.isFileSplatFormat(e)?o=(new T).loadFromURL(e,r):e.endsWith(".ply")?o=(new P).loadFromURL(e,r,0,t):s(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${e}`)),o.then((e=>{n(e)})).catch((()=>{s(new Error(`Viewer::loadFileToSplatBuffer -> Could not load file ${e}`))}))}))}loadSplatBuffersIntoMesh=function(){let e,t=0;return function(n,r=[],s=!0){this.splatRenderingInitialized=!1,t++;const o=()=>new Promise((e=>{s&&(this.loadingSpinner.show(),this.loadingSpinner.setMessage("Processing splats...")),window.setTimeout((()=>{this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortRunning=!1,this.updateSplatMesh(n,r),this.setupSortWorker(this.splatMesh).then((()=>{t--,0===t&&(s&&this.loadingSpinner.hide(),this.splatRenderingInitialized=!0,this.updateView(!0,!0)),e()}))}),1)}));return e=e?e.then((()=>o())):o(),e}}();updateSplatMesh(e,t){this.splatMesh||(this.splatMesh=new Q(this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort));const n=this.splatMesh.splatBuffers||[],r=this.splatMesh.splatBufferOptions||[];n.push(...e),r.push(...t),this.splatMesh.build(n,r),this.renderer&&this.splatMesh.setRenderer(this.renderer);const s=this.splatMesh.getSplatCount();console.log(`Total splat count: ${s}`),this.splatMesh.frustumCulled=!1,this.splatRenderCount=s}setupSortWorker(e){return new Promise((t=>{const n=e.getSplatCount(),r=$(n);r.onmessage=e=>{if(e.data.sortDone)this.sortRunning=!1,this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount),this.lastSortTime=e.data.sortTime;else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){console.log("Sorting web worker WASM setup complete."),r.postMessage({centers:this.splatMesh.getIntegerCenters(!0).buffer}),this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,n),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,n),this.sortWorkerPrecomputedDistances=new Int32Array(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,n);for(let e=0;e<n;e++)this.sortWorkerIndexesToSort[e]=e}else if(e.data.sortSetupComplete){console.log("Sorting web worker ready."),this.splatMesh.updateIndexes(this.sortWorkerSortedIndexes,n);const e=this.splatMesh.getSplatDataTextures(),s=e.covariances.size,o=e.centerColors.size;console.log("Covariances texture size: "+s.x+" x "+s.y),console.log("Centers/colors texture size: "+o.x+" x "+o.y),this.sortWorker=r,t()}}}))}gatherSceneNodes=function(){const t=[],n=new e.Vector3,r=new e.Vector3,s=new e.Vector3,o=new e.Matrix4,i=new e.Vector3,a=new e.Vector3(0,0,-1),c=new e.Vector3,l=e=>c.copy(e.max).sub(e.min).length();return function(c){this.getRenderDimensions(i);const h=i.y/2/Math.tan(this.camera.fov/2*e.MathUtils.DEG2RAD),d=Math.atan(i.x/2/h),p=Math.atan(i.y/2/h),u=Math.cos(d),m=Math.cos(p);o.copy(this.camera.matrixWorld).invert(),o.multiply(this.splatMesh.matrixWorld);const f=this.splatMesh.getSplatTree();let y=0,g=0;const C=f.nodesWithIndexes.length;for(let e=0;e<C;e++){const i=f.nodesWithIndexes[e];s.copy(i.center).applyMatrix4(o);const h=s.length();s.normalize(),n.copy(s).setX(0).normalize(),r.copy(s).setY(0).normalize();const d=a.dot(r),p=a.dot(n),C=l(i);!c&&(d<u-.6||p<m-.6||h>125)&&h>C||(g+=i.data.indexes.length,t[y]=i,i.data.distanceToNode=h,y++)}t.length=y,t.sort(((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1)),this.splatRenderCount=g;let A=g*K.BytesPerInt;for(let e=0;e<y;e++){const n=t[e],r=n.data.indexes.length,s=r*K.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,A-s,r).set(n.data.indexes),A-=s}}}();start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(cancelAnimationFrame(),this.selfDrivenModeRunning=!1)}selfDrivenUpdate(){this.selfDrivenMode&&requestAnimationFrame(this.selfDrivenUpdateFunc),this.update(),this.render()}setRenderer(e){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer)}setCamera(e){this.camera=e,this.controls&&(this.controls.object=e)}update(e,t){e&&this.setRenderer(e),t&&this.setCamera(t),this.initializeFromExternalUpdate&&this.init(),this.initialized&&this.splatRenderingInitialized&&(this.controls&&this.controls.update(),this.updateView(),this.updateForRendererSizeChanges(),this.updateSplatMeshUniforms(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfo(),this.updateControlPlane())}render=function(){if(!this.initialized||!this.splatRenderingInitialized)return;const e=this.renderer.autoClear;this.renderer.autoClear=!1,(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.scene)&&this.renderer.render(this.scene,this.camera),this.renderer.render(this.splatMesh,this.camera),this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};updateFPS=function(){let e=m(),t=0;return function(){const n=m();n-e>=1?(this.currentFPS=t,t=0,e=n):t++}}();updateForRendererSizeChanges=function(){const t=new e.Vector2,n=new e.Vector2;return function(){this.renderer.getSize(n),n.x===t.x&&n.y===t.y||(this.usingExternalCamera||(this.camera.aspect=n.x/n.y,this.camera.updateProjectionMatrix()),t.copy(n))}}();timingSensitiveUpdates=function(){let e;return function(){const t=m();e||(e=t);const n=t-e;this.updateCameraTransition(t),this.updateFocusMarker(n),e=t}}();updateCameraTransition=function(){let t=new e.Vector3,n=new e.Vector3,r=new e.Vector3;return function(e){if(this.transitioningCameraTarget){n.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),r.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const s=Math.acos(n.dot(r)),o=(s/(Math.PI/3)*.65+.3)/s*(e-this.transitioningCameraTargetStartTime);t.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,o),this.camera.lookAt(t),this.controls.target.copy(t),o>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const t=new e.Vector2;let n=!1;return function(e){this.getRenderDimensions(t);if(this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const r=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let s=Math.min(r+10*e,1);this.sceneHelper.setFocusMarkerOpacity(s),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t),n=!0}else{let r;if(r=n?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),r>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t);let n=Math.max(r-2.5*e,0);this.sceneHelper.setFocusMarkerOpacity(n),0===n&&this.sceneHelper.setFocusMarkerVisibility(!1)}n=!1}}}();updateMeshCursor=function(){const t=[],n=new e.Vector2;return function(){this.showMeshCursor?(this.getRenderDimensions(n),t.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,n),this.raycaster.intersectSplatMesh(this.splatMesh,t),t.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(t[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):this.sceneHelper.setMeshCursorVisibility(!1)}}();updateInfo=function(){const t=new e.Vector2;return function(){if(!this.showInfo)return;const e=this.splatMesh.getSplatCount();this.getRenderDimensions(t);const n=this.camera.position,r=`[${n.x.toFixed(5)}, ${n.y.toFixed(5)}, ${n.z.toFixed(5)}]`;this.infoPanelCells.cameraPosition.innerHTML=r;const s=this.controls.target,o=`[${s.x.toFixed(5)}, ${s.y.toFixed(5)}, ${s.z.toFixed(5)}]`;this.infoPanelCells.cameraLookAt.innerHTML=o;const i=this.camera.up,a=`[${i.x.toFixed(5)}, ${i.y.toFixed(5)}, ${i.z.toFixed(5)}]`;if(this.infoPanelCells.cameraUp.innerHTML=a,this.showMeshCursor){const e=this.sceneHelper.meshCursor.position,t=`[${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}]`;this.infoPanelCells.cursorPosition.innerHTML=t}else this.infoPanelCells.cursorPosition.innerHTML="N/A";this.infoPanelCells.fps.innerHTML=this.currentFPS,this.infoPanelCells.renderWindow.innerHTML=`${t.x} x ${t.y}`;const c=this.splatRenderCount/e*100;this.infoPanelCells.renderSplatCount.innerHTML=`${this.splatRenderCount} splats out of ${e} (${c.toFixed(2)}%)`,this.infoPanelCells.sortTime.innerHTML=`${this.lastSortTime.toFixed(3)} ms`}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}updateView=function(){const t=new e.Matrix4,n=[],r=new e.Vector3(0,0,-1),s=new e.Vector3(0,0,-1),o=new e.Vector3,i=new e.Vector3,a=[],c=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return function(e=!1,l=!1){let h=0,d=0;s.set(0,0,-1).applyQuaternion(this.camera.quaternion);let p=!1,u=!1;if(h=s.dot(r),d=i.copy(this.camera.position).sub(o).length(),(e||0!==a.length||(h<=.95&&(p=!0),d>=1&&(u=!0),p||u))&&(t.copy(this.camera.matrixWorld).invert(),t.premultiply(this.camera.projectionMatrix),t.multiply(this.splatMesh.matrixWorld),n[0]=this.camera.position.x,n[1]=this.camera.position.y,n[2]=this.camera.position.z,!this.sortRunning)){let e;if(this.sortRunning=!0,this.gatherSceneNodes(l),this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&this.splatMesh.computeDistancesOnGPU(t,this.sortWorkerPrecomputedDistances),0===a.length){for(let e of c)if(h<e.angleThreshold){for(let t of e.sortFractions)a.push(Math.floor(this.splatRenderCount*t));break}a.push(this.splatRenderCount)}e=Math.min(a.shift(),this.splatRenderCount),this.sortWorker.postMessage({sort:{viewProj:this.splatMesh.getIntegerMatrixArray(t),cameraPosition:n,splatRenderCount:this.splatRenderCount,splatSortCount:e,usePrecomputedDistances:this.gpuAcceleratedSort}}),0===a.length&&(o.copy(this.camera.position),r.copy(s))}}}();getSplatMesh(){return this.splatMesh}isMobile(){return navigator.userAgent.includes("Mobi")}}class q extends e.Group{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.ignoreDevicePixelRatio=!1,e.initializeFromExternalUpdate=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new Z(e),this.callbackMesh=this.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=this.onBeforeRender.bind(this)}addSceneFromFile(e,t={}){return!1!==t.showLoadingSpinner&&(t.showLoadingSpinner=!0),this.viewer.loadFile(e,t).then((()=>{this.add(this.viewer.splatMesh)}))}addScenesFromFiles(e,t){return!1!==t&&(t=!0),this.viewer.loadFiles(e,t).then((()=>{this.add(this.viewer.splatMesh)}))}onBeforeRender(e,t,n){this.viewer.update(e,n)}createCallbackMesh(){const t=new e.SphereGeometry(1,8,8),n=new e.MeshBasicMaterial;n.colorWrite=!1,n.depthWrite=!1;const r=new e.Mesh(t,n);return r.frustumCulled=!1,r}}export{I as OrbitControls,P as PlyLoader,S as PlyParser,q as RenderableViewer,b as SplatBuffer,M as SplatCompressor,T as SplatLoader,Z as Viewer};
//# sourceMappingURL=gaussian-splats-3d.module.min.js.map
